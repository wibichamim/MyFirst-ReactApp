{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","className","onClick","click","name","age","type","onChange","change","value","App","useState","persons","id","showPersons","personsState","setPersonsState","console","log","map","index","personIndex","splice","deletePersonHandler","key","event","findIndex","p","target","nameChangeHandler","doesShow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAceA,G,YAXA,SAACC,GACd,OACE,yBAAKC,UAAU,UACb,uBAAGC,QAASF,EAAMG,OAAlB,cACcH,EAAMI,KADpB,YACmCJ,EAAMK,IADzC,cAGA,2BAAOC,KAAK,OAAOC,SAAUP,EAAMQ,OAAQC,MAAOT,EAAMI,UCoF/CM,EAzFH,SAACV,GAAW,IAAD,EACmBW,mBAAS,CAC/CC,QAAS,CACP,CAAEC,GAAI,IAAKT,KAAM,OAAQC,IAAK,IAC9B,CAAEQ,GAAI,IAAKT,KAAM,OAAQC,IAAK,KAEhCS,aAAa,IANM,mBACdC,EADc,KACAC,EADA,KASrBC,QAAQC,IAAIH,GAEZ,IAwCIH,EAAU,KAoBd,OAlBIG,EAAaD,cACfF,EACE,6BACGG,EAAaH,QAAQO,KAAI,SAACpB,EAAQqB,GACjC,OACE,kBAAC,EAAD,CACEhB,KAAML,EAAOK,KACbC,IAAKN,EAAOM,IACZF,MAAO,kBAvBS,SAACkB,GAE3B,IAAMtB,EAAM,YAAOgB,EAAaH,SAChCb,EAAOuB,OAAOD,EAAa,GAC3BL,EAAgB,CAAEJ,QAASb,EAAQe,aAAa,IAmBzBS,CAAoBH,IACjCI,IAAKzB,EAAOc,GACZL,OAAQ,SAACiB,GAAD,OA1CM,SAACA,EAAOZ,GAChC,IAAMQ,EAAcN,EAAaH,QAAQc,WAAU,SAACC,GAClD,OAAOA,EAAEd,KAAOA,KAGZd,EAAM,eACPgB,EAAaH,QAAQS,IAG1BtB,EAAOK,KAAOqB,EAAMG,OAAOnB,MAE3B,IAAMG,EAAO,YAAOG,EAAaH,SACjCA,EAAQS,GAAetB,EAEvBiB,EAAgB,CAAEJ,QAASA,EAASE,aAAa,IA4BpBe,CAAkBJ,EAAO1B,EAAOc,YAQ1DE,EAAaH,QAKhB,yBAAKX,UAAU,OACb,kDACA,4BAAQA,UAAU,iBAAiBC,QAnEb,WACxBc,EAAgB,CACdJ,QAAS,CACP,CAAEC,GAAI,IAAKT,KAAM,OAAQC,IAAK,GAC9B,CAAEQ,GAAI,IAAKT,KAAM,OAAQC,IAAK,IAEhCS,aAAa,MA6Db,eAGA,4BAAQb,UAAU,iBAAiBC,QApCX,WAC1B,IAAMU,EAAUG,EAAaH,QACvBkB,EAAWf,EAAaD,YAC9BE,EAAgB,CAAEJ,UAASE,aAAcgB,MAiCvC,eAGClB,GAZI,6CChESmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.db86f9a4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Person.css\";\r\n\r\nconst person = (props) => {\r\n  return (\r\n    <div className=\"Person\">\r\n      <p onClick={props.click}>\r\n        my name is {props.name} and I'm {props.age} years old\r\n      </p>\r\n      <input type=\"text\" onChange={props.change} value={props.name} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default person;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Person/Person\";\n\nconst App = (props) => {\n  const [personsState, setPersonsState] = useState({\n    persons: [\n      { id: \"1\", name: \"Wibi\", age: 22 },\n      { id: \"2\", name: \"Jaka\", age: 23 },\n    ],\n    showPersons: false,\n  });\n\n  console.log(personsState);\n\n  const switchNameHandler = () => {\n    setPersonsState({\n      persons: [\n        { id: \"2\", name: \"Nana\", age: 1 },\n        { id: \"3\", name: \"Nina\", age: 2 },\n      ],\n      showPersons: true,\n    });\n  };\n\n  const nameChangeHandler = (event, id) => {\n    const personIndex = personsState.persons.findIndex((p) => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...personsState.persons[personIndex],\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...personsState.persons];\n    persons[personIndex] = person;\n\n    setPersonsState({ persons: persons, showPersons: true });\n  };\n\n  const deletePersonHandler = (personIndex) => {\n    // const person = personsState.persons;\n    const person = [...personsState.persons];\n    person.splice(personIndex, 1);\n    setPersonsState({ persons: person, showPersons: true });\n  };\n\n  const tooglePersonHandler = () => {\n    const persons = personsState.persons;\n    const doesShow = personsState.showPersons;\n    setPersonsState({ persons, showPersons: !doesShow });\n  };\n\n  let persons = null;\n\n  if (personsState.showPersons) {\n    persons = (\n      <div>\n        {personsState.persons.map((person, index) => {\n          return (\n            <Person\n              name={person.name}\n              age={person.age}\n              click={() => deletePersonHandler(index)}\n              key={person.id}\n              change={(event) => nameChangeHandler(event, person.id)}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  if (!personsState.persons) {\n    return <span>Loading...</span>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>My First React App</h1>\n      <button className=\"btn btn-switch\" onClick={switchNameHandler}>\n        Switch Name\n      </button>\n      <button className=\"btn btn-toogle\" onClick={tooglePersonHandler}>\n        Toogle Name\n      </button>\n      {persons}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}