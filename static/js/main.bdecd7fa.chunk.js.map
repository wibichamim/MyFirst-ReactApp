{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["StyledDiv","styled","div","person","props","onClick","click","name","age","type","onChange","change","value","App","useState","persons","id","showPersons","personsState","setPersonsState","console","log","classes","length","push","map","index","Person","personIndex","splice","deletePersonHandler","key","event","findIndex","p","target","nameChangeHandler","className","join","doesShow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yjBAIA,IAAMA,E,MAAYC,EAAOC,IAAV,KAyBAC,EAXA,SAACC,GACd,OACE,kBAACJ,EAAD,KACE,uBAAGK,QAASD,EAAME,OAAlB,cACcF,EAAMG,KADpB,YACmCH,EAAMI,IADzC,cAGA,2BAAOC,KAAK,OAAOC,SAAUN,EAAMO,OAAQC,MAAOR,EAAMG,SC0G/CM,EA/GH,SAACT,GAAW,IAAD,EACmBU,mBAAS,CAC/CC,QAAS,CACP,CAAEC,GAAI,IAAKT,KAAM,OAAQC,IAAK,IAC9B,CAAEQ,GAAI,IAAKT,KAAM,SAAUC,IAAK,KAElCS,aAAa,IANM,mBACdC,EADc,KACAC,EADA,KASrBC,QAAQC,IAAIH,GAEZ,IAwCMI,EAAU,GACZJ,EAAaH,QAAQQ,QAAU,GACjCD,EAAQE,KAAK,OAEXN,EAAaH,QAAQQ,QAAU,GACjCD,EAAQE,KAAK,QAcf,IAAIT,EAAU,KAuBd,OArBIG,EAAaD,cACfF,EACE,6BACGG,EAAaH,QAAQU,KAAI,SAACtB,EAAQuB,GACjC,OACE,kBAACC,EAAD,CACEpB,KAAMJ,EAAOI,KACbC,IAAKL,EAAOK,IACZF,MAAO,kBA1CS,SAACsB,GAE3B,IAAMzB,EAAM,YAAOe,EAAaH,SAChCZ,EAAO0B,OAAOD,EAAa,GAC3BT,EAAgB,CAAEJ,QAASZ,EAAQc,aAAa,IAsCzBa,CAAoBJ,IACjCK,IAAK5B,EAAOa,GACZL,OAAQ,SAACqB,GAAD,OA7DM,SAACA,EAAOhB,GAChC,IAAMY,EAAcV,EAAaH,QAAQkB,WAAU,SAACC,GAClD,OAAOA,EAAElB,KAAOA,KAGZb,EAAM,eACPe,EAAaH,QAAQa,IAG1BzB,EAAOI,KAAOyB,EAAMG,OAAOvB,MAE3B,IAAMG,EAAO,YAAOG,EAAaH,SACjCA,EAAQa,GAAezB,EAEvBgB,EAAgB,CAAEJ,QAASA,EAASE,aAAa,IA+CpBmB,CAAkBJ,EAAO7B,EAAOa,YAW1DE,EAAaH,QAKhB,yBAAKsB,UAAU,OACb,wBAAIA,UAAWf,EAAQgB,KAAK,MAA5B,sBACA,4BAAQD,UAAU,iBAAiBhC,QAzFb,WACxBc,EAAgB,CACdJ,QAAS,CACP,CAAEC,GAAI,IAAKT,KAAM,OAAQC,IAAK,GAC9B,CAAEQ,GAAI,IAAKT,KAAM,OAAQC,IAAK,IAEhCS,aAAa,MAmFb,eAGA,4BAAQoB,UAAU,iBAAiBhC,QA1DX,WAC1B,IAAMU,EAAUG,EAAaH,QACvBwB,EAAWrB,EAAaD,YAC9BE,EAAgB,CAAEJ,UAASE,aAAcsB,MAuDvC,eAGCxB,GAZI,6CCrGSyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.bdecd7fa.chunk.js","sourcesContent":["import React from \"react\";\r\n// import \"./Person.css\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDiv = styled.div`\r\n  width: 60%;\r\n  margin: 20px auto;\r\n  border: 1px solid #eeeeee;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 3px #cccccc;\r\n  padding: 16px;\r\n  text-align: center;\r\n\r\n  @media (min-width: 500px) {\r\n    width: 450px;\r\n  }\r\n`;\r\n\r\nconst person = (props) => {\r\n  return (\r\n    <StyledDiv>\r\n      <p onClick={props.click}>\r\n        my name is {props.name} and I'm {props.age} years old\r\n      </p>\r\n      <input type=\"text\" onChange={props.change} value={props.name} />\r\n    </StyledDiv>\r\n  );\r\n};\r\n\r\nexport default person;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n// import styled from \"styled-components\";\r\nimport Person from \"./Person/Person\";\r\n\r\n// const StyledButton = styled.button`\r\n//   border-radius: 8px;\r\n//   cursor: pointer;\r\n//   background-color: ${(props) => (props.alt ? \"red\" : \"green\")};\r\n//   color: white;\r\n//   font: inherit;\r\n//   padding: 10px;\r\n//   cursor: pointer;\r\n//   margin-left: 10px;\r\n//   &:hover {\r\n//     background-color: ${(props) => (props.alt ? \"salmon\" : \"lightgreen\")};\r\n//   }\r\n// `;\r\n\r\nconst App = (props) => {\r\n  const [personsState, setPersonsState] = useState({\r\n    persons: [\r\n      { id: \"1\", name: \"Wibi\", age: 22 },\r\n      { id: \"2\", name: \"Weeboo\", age: 23 },\r\n    ],\r\n    showPersons: false,\r\n  });\r\n\r\n  console.log(personsState);\r\n\r\n  const switchNameHandler = () => {\r\n    setPersonsState({\r\n      persons: [\r\n        { id: \"2\", name: \"Nana\", age: 1 },\r\n        { id: \"3\", name: \"Nina\", age: 2 },\r\n      ],\r\n      showPersons: true,\r\n    });\r\n  };\r\n\r\n  const nameChangeHandler = (event, id) => {\r\n    const personIndex = personsState.persons.findIndex((p) => {\r\n      return p.id === id;\r\n    });\r\n\r\n    const person = {\r\n      ...personsState.persons[personIndex],\r\n    };\r\n\r\n    person.name = event.target.value;\r\n\r\n    const persons = [...personsState.persons];\r\n    persons[personIndex] = person;\r\n\r\n    setPersonsState({ persons: persons, showPersons: true });\r\n  };\r\n\r\n  const deletePersonHandler = (personIndex) => {\r\n    // const person = personsState.persons;\r\n    const person = [...personsState.persons];\r\n    person.splice(personIndex, 1);\r\n    setPersonsState({ persons: person, showPersons: true });\r\n  };\r\n\r\n  const tooglePersonHandler = () => {\r\n    const persons = personsState.persons;\r\n    const doesShow = personsState.showPersons;\r\n    setPersonsState({ persons, showPersons: !doesShow });\r\n  };\r\n\r\n  const classes = [];\r\n  if (personsState.persons.length <= 1) {\r\n    classes.push(\"red\");\r\n  }\r\n  if (personsState.persons.length <= 0) {\r\n    classes.push(\"bold\");\r\n  }\r\n\r\n  // const style = {\r\n  //   backgroundColor: \"green\",\r\n  //   color: \"white\",\r\n  //   font: \"inherit\",\r\n  //   padding: \"10px\",\r\n  //   cursor: \"pointer\",\r\n  //   \":hover\": {\r\n  //     backgroundColor: \"lightgreen\",\r\n  //   },\r\n  // };\r\n\r\n  let persons = null;\r\n\r\n  if (personsState.showPersons) {\r\n    persons = (\r\n      <div>\r\n        {personsState.persons.map((person, index) => {\r\n          return (\r\n            <Person\r\n              name={person.name}\r\n              age={person.age}\r\n              click={() => deletePersonHandler(index)}\r\n              key={person.id}\r\n              change={(event) => nameChangeHandler(event, person.id)}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n\r\n    // style.backgroundColor = \"red\";\r\n    // style[\":hover\"] = { backgroundColor: \"salmon\" };\r\n  }\r\n\r\n  if (!personsState.persons) {\r\n    return <span>Loading...</span>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className={classes.join(\" \")}>My First React App</h1>\r\n      <button className=\"btn btn-switch\" onClick={switchNameHandler}>\r\n        Switch Name\r\n      </button>\r\n      <button className=\"btn btn-toogle\" onClick={tooglePersonHandler}>\r\n        Toogle Name\r\n      </button>\r\n      {persons}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}